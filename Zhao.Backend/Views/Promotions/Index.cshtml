@model IEnumerable<Promotion>
@using Microsoft.AspNetCore.Authorization
@using Zhao.Backend.Controllers
@using Zhao.Backend.Extra
@inject IAuthorizationService authorizationService
@inject TpContext context

@{
    ViewBag.Title = "Promotions";
}

<div class="promotion">
    <h1 class="reservation__titre">Promotions</h1>
    <p class="reservation__sous-titre"></p>
</div>

@if ((await authorizationService.AuthorizeAsync(User, "EstAdministrateur")).Succeeded)
{
    <div class="creation">
        <a class="creation__btn" asp-action="Create">Créer une promotion</a>
    </div>
}
<div class="creation">
    <a class="link" asp-action="FiltrerTous">Tous (@context.Promotions.Count(p => p.Type == "Tous"))</a>
    <a class="link" asp-action="FiltrerComptoir">Comptoir (@context.Promotions.Count(p => p.Type == "Comptoir"))</a>
    <a class="link" asp-action="FiltrerLivraison">Livraison (@context.Promotions.Count(p => p.Type == "Livraison"))</a>
    <a class="link" asp-action="FiltrerSalleManger">Salle à manger (@context.Promotions.Count(p => p.Type == "Salle à manger"))</a>

    @{
        if (PromotionFiltre.EstFiltrer)
        {
            <a class="link link--error" asp-action="Index">Enlever le filtre</a>
        }
    }

</div>

<table class="table">
    <thead>
        <tr>
            <th>@Html.DisplayNameFor(model => model.Type)</th>
            <th>@Html.DisplayNameFor(model => model.TauxApplicable)</th>
            <th>@Html.DisplayNameFor(model => model.Description)</th>
            <th>@Html.DisplayNameFor(model => model.DateDebut)</th>
            <th>@Html.DisplayNameFor(model => model.DateFin)</th>
            <th></th>
        </tr>
    </thead>

    <tbody>
        @foreach (var promo in Model)
        {
            <tr>
                <td class="@(promo.DateFin != null && promo.DateFin < DateTime.Now ? "form__text--error" : "")">
                    @Html.DisplayFor(_ => promo.Type)
                </td>
                <td class="@(promo.DateFin != null && promo.DateFin < DateTime.Now ? "form__text--error" : "")">
                    @Html.DisplayFor(_ => promo.TauxApplicable)
                </td>
                <td class="@(promo.DateFin != null && promo.DateFin < DateTime.Now ? "form__text--error" : "")">
                    @Html.DisplayFor(_ => promo.Description)
                </td>
                <td class="@(promo.DateFin != null && promo.DateFin < DateTime.Now ? "form__text--error" : "")">
                    @Html.DisplayFor(_ => promo.DateDebut)
                </td>
                <td class="@(promo.DateFin != null && promo.DateFin < DateTime.Now ? "form__text--error" : "")">
                    @if (promo.DateFin == null)
                    {
                        <span>&#8709;</span>
                    }
                    else
                    {
                        @Html.DisplayFor(_ => promo.DateFin)
                    }
                </td>
                <td>
                    @Html.ActionLink("Détail", "Details", new { id = promo.Id }, new { @class = "link" })
                    @if ((await authorizationService.AuthorizeAsync(User, "EstAdministrateur")).Succeeded)
                    {
                        @Html.ActionLink("Éditer", "Edit", new { id = promo.Id }, new { @class = "link" })
                        @Html.ActionLink("Supprimer", "Delete", new { id = promo.Id }, new { @class = "link link--error" })
                    }
                </td>
            </tr>
        }
    </tbody>
</table>
